<!DOCTYPE html>
<html ng-app="phonecatApp">
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

  	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
  	
    <link rel="stylesheet" href="/bower_components/jquery-file-upload/css/jquery.fileupload.css">
  	

  </head>
  <body ng-controller="PhoneListCtrl">
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>

    <span class="btn btn-success fileinput-button">
        <i class="glyphicon glyphicon-plus"></i>
        <span>Add files...</span>
        <!-- The file input field used as target for the file upload widget -->
        <input id="fileupload" type="file" name="files[]" data-url="/upload" multiple>
    </span>
    <br>
    <br>
    <!-- The global progress bar -->
    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
    <!-- The container for the uploaded files -->
    <div id="files" class="files"></div>
    <br>


<!-- <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js"></script>
<script src="/controllers/controllers.js"></script> -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<script src="http://blueimp.github.io/Gallery/js/jquery.blueimp-gallery.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
<script src="/bower_components/jquery-file-upload/js/vendor/jquery.ui.widget.js"></script>
<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="http://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
<!-- blueimp Gallery script -->
<script src="http://blueimp.github.io/Gallery/js/jquery.blueimp-gallery.min.js"></script>
<!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
<script src="/bower_components/jquery-file-upload/js/jquery.iframe-transport.js"></script>
<!-- The basic File Upload plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload.js"></script>
<!-- The File Upload processing plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload-process.js"></script>
<!-- The File Upload image preview & resize plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload-image.js"></script>
<!-- The File Upload audio preview plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload-audio.js"></script>
<!-- The File Upload video preview plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload-video.js"></script>
<!-- The File Upload validation plugin -->
<script src="/bower_components/jquery-file-upload/js/jquery.fileupload-validate.js"></script>
<!-- The File Upload Angular JS module -->
<!-- <script src="/bower_components/jquery-file-upload/js/jquery.fileupload-angular.js"></script> -->

<script>
/*jslint unparam: true, regexp: true */
/*global window, $ */
$(function () {
  'use strict';
  // Change this to the location of your server-side upload handler:
  var url = window.location.hostname === '/upload/',
      uploadButton = $('<button/>')
          .addClass('btn btn-primary')
          .prop('disabled', true)
          .text('Processing...')
          .on('click', function () {
              var $this = $(this),
                  data = $this.data();
              $this
                  .off('click')
                  .text('Abort')
                  .on('click', function () {
                      $this.remove();
                      data.abort();
                  });
              data.submit().always(function () {
                  $this.remove();
              });
          });
  $('#fileupload').fileupload({
      dataType: 'json',
      autoUpload: false,
      acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
      maxFileSize: 5000000, // 5 MB
      // Enable image resizing, except for Android and Opera,
      // which actually support image resizing, but fail to
      // send Blob objects via XHR requests:
      disableImageResize: /Android(?!.*Chrome)|Opera/
          .test(window.navigator.userAgent),
      previewMaxWidth: 100,
      previewMaxHeight: 100,
      previewCrop: true
  }).on('fileuploadadd', function (e, data) {
      data.context = $('<div/>').appendTo('#files');
      $.each(data.files, function (index, file) {
          var node = $('<p/>')
                  .append($('<span/>').text(file.name));
          if (!index) {
              node
                  .append('<br>')
                  .append(uploadButton.clone(true).data(data));
          }
          node.appendTo(data.context);
      });
  }).on('fileuploadprocessalways', function (e, data) {
      var index = data.index,
          file = data.files[index],
          node = $(data.context.children()[index]);
      if (file.preview) {
          node
              .prepend('<br>')
              .prepend(file.preview);
      }
      if (file.error) {
          node
              .append('<br>')
              .append($('<span class="text-danger"/>').text(file.error));
      }
      if (index + 1 === data.files.length) {
          data.context.find('button')
              .text('Upload')
              .prop('disabled', !!data.files.error);
      }
  }).on('fileuploadprogressall', function (e, data) {
      var progress = parseInt(data.loaded / data.total * 100, 10);
      $('#progress .progress-bar').css(
          'width',
          progress + '%'
      );
  }).on('fileuploaddone', function (e, data) {
      $.each(data.result.files, function (index, file) {
          if (file.url) {
              var link = $('<a>')
                  .attr('target', '_blank')
                  .prop('href', file.url);
              $(data.context.children()[index])
                  .wrap(link);
          } else if (file.error) {
              var error = $('<span class="text-danger"/>').text(file.error);
              $(data.context.children()[index])
                  .append('<br>')
                  .append(error);
          }
      });
  }).on('fileuploadfail', function (e, data) {
      $.each(data.files, function (index, file) {
          var error = $('<span class="text-danger"/>').text('File upload failed.');
          $(data.context.children()[index])
              .append('<br>')
              .append(error);
      });
  }).prop('disabled', !$.support.fileInput)
      .parent().addClass($.support.fileInput ? undefined : 'disabled');
});
</script>



</body>

  
  
</html>
